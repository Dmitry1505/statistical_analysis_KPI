import streamlit as st
import pandas as pd
import plotly.express as px
from streamlit_option_menu import option_menu
from numerize.numerize import numerize
import time
from streamlit_extras.metric_cards import style_metric_cards
st.set_option('deprecation.showPyplotGlobalUse', False)
import plotly.graph_objs as go
#
# #uncomment this line if you use mysql
from query import *

st.set_page_config(page_title="–ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ KPI",page_icon="üìö",layout="wide")
st.title("üìä–ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ KPI –¥–ª—è –æ—Ç—Ä–∞—Å–ª–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")

# # –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º, –Ω–µ –∏–º–µ—é—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏
# theme_plotly = None

# # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–ª—å css
# with open('style.css')as f:
#     st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html = True)

#—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º MySQL
#result = view_all_data()
#df=pd.DataFrame(result,columns=["Policy","Expiry","Location","State","Region","Investment","Construction","BusinessType","Earthquake","Flood","Rating","id"])

#–≥—Ä—É–∑–∏–º excel | –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑–º–µ–Ω–∏—Ç—å –µ—Å–ª–∏ –ø–æ–¥–ª—é—á–∞–µ–º mysql
# df = pd.read_excel('data.xlsx', sheet_name='Sheet1')

# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ
st.sidebar.image('C:\Python - Streamlit Project\logo_1.png', caption='–§–ö–£ –ù–ò–ò –§–°–ò–ù –†–û–°–°–ò–ò¬©')

uploaded_file_xls = st.sidebar.file_uploader("***–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ xlsx,xls***", type=["xlsx", "xls"])
if uploaded_file_xls is not None:
    df = pd.read_excel(uploaded_file_xls)

    region = st.sidebar.multiselect(
        "üìå–í—ã–±–µ—Ä–∏—Ç–µ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥",
        options=df["–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π_–æ–∫—Ä—É–≥"].unique(),
        default=df["–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π_–æ–∫—Ä—É–≥"].unique(),
    )
    construction = st.sidebar.multiselect(
        "üìå–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
        options=df["–û—Ç—Ä–∞—Å–ª—å"].unique(),
        default=df["–û—Ç—Ä–∞—Å–ª—å"].unique(),
    )
    location = st.sidebar.multiselect(
        "üìå–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥",
        options=df["–ì–æ–¥"].unique(),
        default=df["–ì–æ–¥"].unique(),
    )
    Month = st.sidebar.multiselect(
        "üìå–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü",
        options=df["–ú–µ—Å—è—Ü"].unique(),
        default=df["–ú–µ—Å—è—Ü"].unique(),
    )
    df_selection = df.query(
        "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π_–æ–∫—Ä—É–≥==@region & –ì–æ–¥==@location & –ú–µ—Å—è—Ü==@Month & –û—Ç—Ä–∞—Å–ª—å==@construction"
    )

    Year_exp = st.sidebar.multiselect(
        "üìå–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥–æ–≤–æ–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–µ–∑:",
        options=df["–ì–æ–¥"].unique(),
        default=df["–ì–æ–¥"].unique()
    )

    df_selection_exp = df.query("–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π_–æ–∫—Ä—É–≥==@region & –ì–æ–¥==@Year_exp & –ú–µ—Å—è—Ü==@Month & –û—Ç—Ä–∞—Å–ª—å==@construction")

    # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π–¥–∞–±–∞—Ä–∞
    st.sidebar.title('–°—Ä–µ–∑—ã –¥–∞–Ω–Ω—ã—Ö')

else:
    st.title(body=":red-background[ ‚ùåüìö –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É Browse files]")








#–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å






# –≤–∏–¥ –¥–∞–Ω–Ω—ã—Ö
# st.dataframe(df_selection)

#–¥–∞–ª–µ–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑, —Ç–∞–∫–æ–π –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ, —Ä–µ–∂–∏–º, —Å—É–º–º–∞
# –†–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å –æ–±—ä–µ–º–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
def Manufacturing():
    with st.expander("üìà–û—Ç–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        showData=st.multiselect('Filter: ',df_selection.columns,default=["–ß–∏—Å—Ç–∞—è_–ø—Ä–∏–±—ã–ª—å", "–°—É–º–º–∞_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤", "Expiry","–ì–æ–¥","–ú–µ—Å—è—Ü","State","–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π_–æ–∫—Ä—É–≥","–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞","–û—Ç—Ä–∞—Å–ª—å","BusinessType","Earthquake","Flood","Rating"])
        st.dataframe(df_selection[showData],use_container_width=True)
    #compute top analytics
    sum_manufacturing = float(pd.Series(df_selection['–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞']).sum())
    sum_manufacturing_exp = float(pd.Series(df_selection_exp['–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞']).sum())
    mean_manufacturing = float(pd.Series(df_selection['–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞']).mean())
    mean_manufacturing_exp = float(pd.Series(df_selection_exp['–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞']).mean())
    median_manufacturing = float(pd.Series(df_selection['–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞']).median())
    median_manufacturing_exp = float(pd.Series(df_selection_exp['–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞']).median())
    max_manufacturing = float(pd.Series(df_selection['–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞']).max())
    min_manufacturing = float(pd.Series(df_selection['–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞']).min())
    std_manufacturing = float(pd.Series(df_selection['–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞']).std())
    var_manufacturing = float(pd.Series(df_selection['–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞']).var())
    quantiles_manufacturing = pd.Series(df_selection['–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞']).quantile([0.05, 0.25, 0.5, 0.75, 0.95])
    #–¥–æ–±–∞–≤–∏—Ç—å –º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º???
    #–¥–æ–±–∞–≤–∏—Ç—å –∫–≤–∞–Ω—Ç–∏–ª–∏????
    st.header('1Ô∏è‚É£üõ†–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–±—ä–µ–º–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤:')
    st.write("(–û–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –∏ –æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º –æ—Å—É–∂–¥–µ–Ω–Ω—ã—Ö –∫ —Ç—Ä—É–¥—É, –≤ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω–∞—Ö (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –∏ –æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥), (—Ç—ã—Å.—Ä—É–±). –ì–æ–¥–æ–≤–æ–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–µ–∑ - –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–æ—Ç—Ä–∞—Å–ª–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –º–µ—Å—è—Ü–µ–≤, –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–≥–æ–≤) –≤ —Ä–∞–∑–Ω—ã–µ –≥–æ–¥—ã ")
    st.write("–ì–æ–¥–æ–≤–æ–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–µ–∑ - –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–æ—Ç—Ä–∞—Å–ª–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –º–µ—Å—è—Ü–µ–≤, –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–≥–æ–≤) –≤ —Ä–∞–∑–Ω—ã–µ –≥–æ–¥—ã")
    total1,total2,total3,total4,total5,total6=st.columns(6,gap="small")
    with total1:
        if sum_manufacturing>sum_manufacturing_exp:
            sum_exp="inverse"
        else:
            sum_exp="normal"
        if sum_manufacturing==sum_manufacturing_exp:
            sum_exp="off"
        st.metric(label="üü©:green-background[üõ†–°—É–º–º–∞]" , value=f"{sum_manufacturing:,.0f}", delta=f"–ì–æ–¥–æ–≤–æ–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–µ–∑: {sum_manufacturing_exp:,.0f}", delta_color=sum_exp )
    with total2:
        if mean_manufacturing>mean_manufacturing_exp:
            mean_exp="inverse"
        else:
            mean_exp="normal"
        if mean_manufacturing==mean_manufacturing_exp:
            mean_exp="off"
        st.metric(label="üü©:green-background[üõ†–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ]",value=f"{mean_manufacturing:,.0f}", delta=f"–ì–æ–¥–æ–≤–æ–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–µ–∑: {mean_manufacturing_exp:,.0f}", delta_color=mean_exp)
    with total3:
        if median_manufacturing > median_manufacturing_exp:
            median_exp = "inverse"
        else:
            median_exp = "normal"
        if median_manufacturing == median_manufacturing_exp:
            median_exp = "off"
        st.metric(label="üü©:green-background[üõ†–ú–µ–¥–∏–∞–Ω–∞]",value=f"{median_manufacturing:,.0f}", delta=f"–ì–æ–¥–æ–≤–æ–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–µ–∑: {median_manufacturing_exp:,.0f}", delta_color=median_exp)
    with total4:
          st.metric(label="üü©:green-background[üõ†–ú–∞–∫—Å–∏–º—É–º]",value=f"{max_manufacturing:,.0f}")
    with total5:
        st.metric(label="üü©:green-background[üõ†–ú–∏–Ω–∏–º—É–º]", value=f"{min_manufacturing:,.0f}")
    with total6:
          st.metric(label="üü©:green-background[üõ†–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ]",value=f"{ std_manufacturing:,.0f}")

    # total7, total8,total9, total10,total11, total12 = st.columns(6, gap="small")
    # with total7:
    #       st.metric(label="–î–∏—Å–ø–µ—Ä—Å–∏—è",value=f"{var_manufacturing:,.0f}")
    # with total8:
    #       st.metric(label="5-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å",value=f"{quantiles_manufacturing[0.05]:,.0f}")
    # with total9:
    #       st.metric(label="25-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å",value=f"{quantiles_manufacturing[0.25]:,.0f}")
    # with total10:
    #       st.metric(label="50-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å",value=f"{quantiles_manufacturing[0.5]:,.0f}")
    # with total11:
    #     st.metric(label="75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å", value=f"{quantiles_manufacturing[0.75]:,.0f}")
    # with total12:
    #       st.metric(label="95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å",value=f"{quantiles_manufacturing[0.95]:,.0f}")



# style_metric_cards(background_color="#e5efff", border_left_color="#254f77", border_color="#254f77",
#                    box_shadow="#254f77")

def graphs():
    investment_mean_by_district = df_selection.groupby("–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π_–æ–∫—Ä—É–≥")["–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"].sum().reset_index()

    fig_investment_mean = px.bar(
        investment_mean_by_district,
        x="–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
        y="–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π_–æ–∫—Ä—É–≥",
        orientation="h",
        title="<b>–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –ø–æ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–∞–º</b>",
        color_discrete_sequence=["#0083B8"] * len(investment_mean_by_district),
        template="plotly_white",
    )

    fig_investment_mean.update_layout(
        plot_bgcolor="rgba(0,0,0,0)",
        font=dict(color="black"),
        yaxis=dict(showgrid=True, gridcolor='#cecdcd'),  # Show y-axis grid and set its color
        paper_bgcolor='rgba(0, 0, 0, 0)',  # Set paper background color to transparent
        xaxis=dict(showgrid=True, gridcolor='#cecdcd'),  # Show x-axis grid and set its color
    )

    right, center, left = st.columns(3)
    right.plotly_chart(fig_investment_mean, use_container_width=True)

    with center:
        fig_2 = px.parallel_categories(df_selection, dimensions=["–û—Ç—Ä–∞—Å–ª—å", "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π_–æ–∫—Ä—É–≥"], title="–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏", color_continuous_scale=px.colors.sequential.Inferno)
        st.plotly_chart(fig_2, use_container_width=True)

    with left:
        # –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        fig = px.pie(df_selection, values='–û–±—ä–µ–º_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', names='–û—Ç—Ä–∞—Å–ª—å', title='–û—Ç—Ä–∞—Å–ª–∏ –ø–æ –æ–±—ä–µ–º–∞–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞')
        fig.update_layout(legend_title="Regions", legend_y=0.9)
        fig.update_traces(textinfo='percent+label', textposition='inside')
        st.plotly_chart(fig, use_container_width=True)







def Costs_and_cash():
    sum_cash = float(pd.Series(df_selection['–ß–∏—Å—Ç–∞—è_–ø—Ä–∏–±—ã–ª—å']).sum())
    sum_cash_exp = float(pd.Series(df_selection_exp['–ß–∏—Å—Ç–∞—è_–ø—Ä–∏–±—ã–ª—å']).sum())
    mean_cash = float(pd.Series(df_selection['–ß–∏—Å—Ç–∞—è_–ø—Ä–∏–±—ã–ª—å']).mean())
    mean_cash_exp = float(pd.Series(df_selection_exp['–ß–∏—Å—Ç–∞—è_–ø—Ä–∏–±—ã–ª—å']).mean())
    median_cash = float(pd.Series(df_selection['–ß–∏—Å—Ç–∞—è_–ø—Ä–∏–±—ã–ª—å']).median())
    median_cash_exp = float(pd.Series(df_selection_exp['–ß–∏—Å—Ç–∞—è_–ø—Ä–∏–±—ã–ª—å']).median())
    max_manufacturing = float(pd.Series(df_selection['–ß–∏—Å—Ç–∞—è_–ø—Ä–∏–±—ã–ª—å']).max())
    min_manufacturing = float(pd.Series(df_selection['–ß–∏—Å—Ç–∞—è_–ø—Ä–∏–±—ã–ª—å']).min())
    std_manufacturing = float(pd.Series(df_selection['–ß–∏—Å—Ç–∞—è_–ø—Ä–∏–±—ã–ª—å']).std())
    # var_manufacturing = float(pd.Series(df_selection['–ß–∏—Å—Ç–∞—è_–ø—Ä–∏–±—ã–ª—å']).var())
    # quantiles_manufacturing = pd.Series(df_selection['–ß–∏—Å—Ç–∞—è_–ø—Ä–∏–±—ã–ª—å']).quantile([0.05, 0.25, 0.5, 0.75, 0.95])

    #–¥–æ–±–∞–≤–∏—Ç—å –º–∏–Ω–∏–º—É–º –∏ –º–∞–∫—Å–∏–º—É–º
    #–¥–æ–±–∞–≤–∏—Ç—å –∫–≤–∞–Ω—Ç–∏–ª–∏

    st.header('2Ô∏è‚É£üí∞–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏:')
    st.write("(–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –Ω–∞–¥ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ (–ø—Ä–∏–±—ã–ª—å) –æ—Ç –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º –æ—Å—É–∂–¥–µ–Ω–Ω—ã—Ö –∫ —Ç—Ä—É–¥—É, (—Ç—ã—Å. —Ä—É–±))")
    total1,total2,total3,total4,total5,total6=st.columns(6,gap="small")
    with total1:
        if sum_cash > sum_cash_exp:
            sum_cash_exp_dc = "inverse"
        else:
            sum_cash_exp_dc = "normal"
        if sum_cash == sum_cash_exp:
            sum_cash_exp_dc = "off"
        st.metric(label="üü¶ :blue-background[üí∞–°—É–º–º–∞]", value=f"{sum_cash:,.0f}", delta=f"–ì–æ–¥–æ–≤–æ–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–µ–∑:{sum_cash_exp:,.0f}", delta_color=sum_cash_exp_dc)
    with total2:
        if mean_cash > mean_cash_exp:
            mean_cash_exp_dc = "inverse"
        else:
            mean_cash_exp_dc = "normal"
        if mean_cash == mean_cash_exp:
            mean_cash_exp_dc = "off"
        st.metric(label="üü¶ :blue-background[üí∞–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ]",value=f"{mean_cash:,.0f}", delta=f"–ì–æ–¥–æ–≤–æ–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–µ–∑:{mean_cash_exp:,.0f}", delta_color=mean_cash_exp_dc)
    with total3:
        if median_cash > median_cash_exp:
            median_cash_exp_dc = "inverse"
        else:
            median_cash_exp_dc = "normal"
        if median_cash == median_cash_exp:
            median_cash_exp_dc = "off"
        st.metric(label="üü¶ :blue-background[üí∞–ú–µ–¥–∏–∞–Ω–∞]",value=f"{median_cash:,.0f}", delta=f"–ì–æ–¥–æ–≤–æ–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–µ–∑:{median_cash_exp:,.0f}", delta_color=median_cash_exp_dc)
    with total4:
          st.metric(label="üü¶ :blue-background[üí∞–ú–∞–∫—Å–∏–º—É–º]",value=f"{max_manufacturing:,.0f}")
    with total5:
        st.metric(label="üü¶ :blue-background[üí∞–ú–∏–Ω–∏–º—É–º]", value=f"{min_manufacturing:,.0f}")
    with total6:
          st.metric(label="üü¶ :blue-background[üí∞–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ]",value=f"{ std_manufacturing:,.0f}")

    # total7, total8,total9, total10,total11, total12 = st.columns(6, gap="small")
    # with total7:
    #       st.metric(label="–î–∏—Å–ø–µ—Ä—Å–∏—è",value=f"{var_manufacturing:,.0f}")
    # with total8:
    #       st.metric(label="5-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å",value=f"{quantiles_manufacturing[0.05]:,.0f}")
    # with total9:
    #       st.metric(label="25-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å",value=f"{quantiles_manufacturing[0.25]:,.0f}")
    # with total10:
    #       st.metric(label="50-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å",value=f"{quantiles_manufacturing[0.5]:,.0f}")
    # with total11:
    #     st.metric(label="75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å", value=f"{quantiles_manufacturing[0.75]:,.0f}")
    # with total12:
    #       st.metric(label="95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å",value=f"{quantiles_manufacturing[0.95]:,.0f}")



#–ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –æ–±—â–µ–π —Å—É–º–º—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
def Contract():
    st.header('3Ô∏è‚É£ üìÉ –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤:')
    st.write("(–û–±—ä–µ–º –∑–∞–∫–∞–∑–æ–≤ (–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤) –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –∏ –æ–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥ –≤ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º –ø–µ—Ä–∏–æ–¥–µ –≤ –¶–¢–ê–û, –£–ü–ú, –õ–ü–ú, —É—á–∞—Å—Ç–∫–∞—Ö, —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ —Ç—ã—Å. —Ä—É–±.)")
    sum_contract = float(pd.Series(df_selection['–°—É–º–º–∞_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤']).sum())
    sum_contract_exp = float(pd.Series(df_selection_exp['–°—É–º–º–∞_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤']).sum())
    mean_contract = float(pd.Series(df_selection['–°—É–º–º–∞_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤']).mean())
    mean_contract_exp = float(pd.Series(df_selection_exp['–°—É–º–º–∞_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤']).mean())
    median_contract = float(pd.Series(df_selection['–°—É–º–º–∞_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤']).median())
    median_contract_exp = float(pd.Series(df_selection_exp['–°—É–º–º–∞_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤']).median())
    max_contract = float(pd.Series(df_selection['–°—É–º–º–∞_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤']).max())
    min_contract = float(pd.Series(df_selection['–°—É–º–º–∞_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤']).min())
    std_contract = float(pd.Series(df_selection['–°—É–º–º–∞_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤']).std())
    # var_manufacturing = float(pd.Series(df_selection['–°—É–º–º–∞_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤']).var())
    # quantiles_manufacturing = pd.Series(df_selection['–°—É–º–º–∞_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤']).quantile([0.05, 0.25, 0.5, 0.75, 0.95])

    total1,total2,total3,total4,total5,total6=st.columns(6,gap="small")
    with total1:
        if sum_contract>sum_contract_exp:
            sum_c_exp="inverse"
        else:
            sum_c_exp="normal"
        if sum_contract==sum_contract_exp:
            sum_c_exp="off"
        st.metric(label="üüß:orange-background[üìÉ–°—É–º–º–∞]", value=f"{sum_contract:,.0f}", delta=f"–ì–æ–¥–æ–≤–æ–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–µ–∑:{sum_contract_exp:,.0f}", delta_color=sum_c_exp)
    with total2:
        if mean_contract>mean_contract_exp:
            mean_c_exp="inverse"
        else:
            mean_c_exp="normal"
        if mean_contract==mean_contract_exp:
            mean_c_exp="off"
        st.metric(label="üüß:orange-background[üìÉ–°—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ]",value=f"{mean_contract:,.0f}", delta=f"–ì–æ–¥–æ–≤–æ–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–µ–∑:{mean_contract_exp:,.0f}", delta_color=mean_c_exp)
    with total3:
        if median_contract > median_contract_exp:
            median_c_exp = "inverse"
        else:
            median_c_exp = "normal"
        if sum_contract == sum_contract_exp:
            median_c_exp = "off"
        st.metric(label="üüß:orange-background[üìÉ–ú–µ–¥–∏–∞–Ω–∞]",value=f"{median_contract:,.0f}", delta=f"–ì–æ–¥–æ–≤–æ–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–µ–∑:{median_contract_exp:,.0f}", delta_color=median_c_exp)
    with total4:
          st.metric(label="üüß:orange-background[üìÉ–ú–∞–∫—Å–∏–º—É–º]",value=f"{max_contract:,.0f}")
    with total5:
        st.metric(label="üüß:orange-background[üìÉ–ú–∏–Ω–∏–º—É–º]", value=f"{min_contract:,.0f}")
    with total6:
          st.metric(label="üüß:orange-background[üìÉ–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ]",value=f"{ std_contract:,.0f}")




# #
# st.subheader('‚ñ∂  –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π ')
# graphs

#
# #—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø—Ä–∏–±—ã–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∂–∏–¥–∞–µ–º–æ–π —Ü–µ–ª–∏
# # –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª —Ç–∞–∫ –∫–∞–∫ —Å—á–∏—Ç–∞—é —ç—Ç–æ —Ç—É—Ç –ª–∏—à–Ω–µ–µ
# # def Progressbar():
# #     st.markdown("""<style>.stProgress > div > div > div > div { background-image: linear-gradient(to right, #99ff99 , #FFFF00)}</style>""",unsafe_allow_html=True,)
# #     target=3000000000
# #     current=df_selection["Investment"].sum()
# #     percent=round((current/target*100))
# #     mybar=st.progress(0)
# #
# #     if percent>100:
# #         st.subheader("Target done !")
# #     else:
# #      st.write("you have ",percent, "% " ,"of ", (format(target, 'd')), "TZS")
# #      for percent_complete in range(percent):
# #         time.sleep(0.1)
# #         mybar.progress(percent_complete+1,text=" Target Percentage")
# #
# # #menu bar
# # def sideBar():
# #  with st.sidebar:
# #     selected=option_menu(
# #         menu_title="Main Menu",
# #         options=["Home","Progress"],
# #         icons=["house","eye"],
# #         menu_icon="cast",
# #         default_index=0
# #     )
# #  if selected=="Home":
# #     #st.subheader(f"Page: {selected}")
# #     Home()
# #     graphs()
# #  if selected=="Progress":
# #     #st.subheader(f"Page: {selected}")
# #     Progressbar()
# #     graphs()
#
# # sideBar()


#
def Fig12():
    st.subheader('‚ñ∂ –ö–æ—Ä–æ–±—á–∞—Ç—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã (–æ—Ç—Ä–∞—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞)')
    # feature_x = st.selectbox('Select feature for x Qualitative data', df_selection.select_dtypes("object").columns)
    feature_y = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', df_selection.select_dtypes("number").columns,key="feature_y")
    fig2 = go.Figure(
        data=[go.Box(x=df_selection['–û—Ç—Ä–∞—Å–ª—å'], y=df[feature_y])],
        layout=go.Layout(
            title=go.layout.Title(text="–í–ò–î–´ –û–¢–†–ê–°–õ–ï–ô –ü–†–û–ò–ó–í–û–î–°–¢–í–ê"),
            plot_bgcolor='rgba(0, 0, 0, 0)',  # Set plot background color to transparent
            paper_bgcolor='rgba(0, 0, 0, 0)',  # Set paper background color to transparent
            xaxis=dict(showgrid=True, gridcolor='#cecdcd'),  # Show x-axis grid and set its color
            yaxis=dict(showgrid=True, gridcolor='#cecdcd'),  # Show y-axis grid and set its color
            font=dict(color='#cecdcd'),  # Set text color to black
        )
    )
    # Display the Plotly figure using Streamlit
    st.plotly_chart(fig2,use_container_width=True)



def Fig13():
    st.subheader('‚ñ∂ –ö–æ—Ä–æ–±—á–∞—Ç—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã (–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–≥–∞)')
    # feature_x = st.selectbox('Select feature for x Qualitative data', df_selection.select_dtypes("object").columns)
    feature_y3 = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', df_selection.select_dtypes("number").columns,key="feature_y3")
    fig3 = go.Figure(
        data=[go.Box(x=df_selection['–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π_–æ–∫—Ä—É–≥'], y=df[feature_y3])],
        layout=go.Layout(
            title=go.layout.Title(text="–§–ï–î–ï–†–ê–õ–¨–ù–´–ï –û–ö–†–£–ì–ê"),
            plot_bgcolor='rgba(0, 0, 0, 0)',  # Set plot background color to transparent
            paper_bgcolor='rgba(0, 0, 0, 0)',  # Set paper background color to transparent
            xaxis=dict(showgrid=True, gridcolor='#cecdcd'),  # Show x-axis grid and set its color
            yaxis=dict(showgrid=True, gridcolor='#cecdcd'),  # Show y-axis grid and set its color
            font=dict(color='#cecdcd'),  # Set text color to black
        )
    )
    # Display the Plotly figure using Streamlit
    st.plotly_chart(fig3,use_container_width=True)

# –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ö–û–ì–î–ê –ß–ê–°–¢–¨ –°–†–ï–ó–û–í –ù–ï –ó–ê–ü–û–õ–ù–ï–ù–´!

# if df_selection.empty:
#     st.title(body=":red-background[‚ùå–û—à–∏–±–∫–∞!‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å—Ä–µ–∑—ã –¥–∞–Ω–Ω—ã—Ö!üìö]")
# else:
#     Manufacturing()
#     graphs()
#     Costs_and_cash()
#     Contract()
#     Fig12()
#     Fig13()


if uploaded_file_xls is not None:
    if df_selection.empty:
        st.title(body=":red-background[‚ùå–û—à–∏–±–∫–∞!‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å—Ä–µ–∑—ã –¥–∞–Ω–Ω—ã—Ö!üìö]")
    else:
        Manufacturing()
        graphs()
        Costs_and_cash()
        Contract()
        Fig12()
        Fig13()


# üë§
#theme
hide_st_style="""

<style>
#MainMenu {visibility:hidden;}
footer {visibility:hidden;}
header {visibility:hidden;}
</style>
"""

# streamlit run "C:\Python - Streamlit Project\main.py"